.TH "SENDIP" "1" "April 11, 2018" "sendip 2.6.0"

.SH "NAME"
sendip \- a tool to send arbitrary IP packets

.SH "SYNOPSIS"
.\" no hyphenation
.nh
.\" no alignment
.na
.HP
\fBsendip\fR [\-h] [\-V] [\-v] [\-D\ \fIotype\fR] [\-d\ \fIdata\fR\ |\ \-f\ \fIfile\fR] [\-L\ \fInum\fR] [\-T\ time] [\-S sock_opt]... [\-p\ \fImodule\fR]... [\fImodule_options\fR]... \fIhostname\fR
.\" re-enable hyphenation and aligment
.ad
.hy

.SH "DESCRIPTION"
.PP
SendIP is a command-line tool to send arbitrary IP packets. It has a large
number of options to specify the content of every header of a RIP, RIPng, BGP,
TCP, UDP, ICMP, or raw IPv4/IPv6 packet. It also allows any data to be added
to the packet. Checksums can be calculated automatically, but if you wish to
send out wrong checksums, that is supported too.
.PP
Modules are loaded in the order the -p options appear.  The headers from
each module are put immediately inside the headers from the previous module
in the final packet.  For example, to embed bgp inside tcp inside ipv4, do:
.RS
.P
sendip -p ipv4 -p tcp -p bgp ...
.RE
.PP
If no module is given, the \-d\ \fIdata\fR
or \-f\ \fIfile\fR option must be used to set the payload (in this case it
is assumed, that the packet is of type \fBAFINET\fR, i.e. IPv4). Otherwise
either \fBipv4\fR or \fBipv6\fR must be the first module given via CLI options.

Modules may be repeated to create multiple instances of a given header type.
For example, to create an ipip tunneled packet (ipv4 inside ipv4), do
sendip\ -p\ ipv4\ \fIouter-header-args\fR -p\ ipv4\ \fIinner-header-args\fR\ ...

In the case of repeated modules, arguments are applied to the closest matching
module in the command line.

.SH "OPTIONS"
.PP
Beside the module specific options the following general options are recognized
by \fBsendip\fR:
.TP
\-h
Print a help message and exit.
.TP
\-V
Print version and exit.
.TP
\-v
Be verbose.
.TP
\-D\ \fIotype\fR
Print a hex dump from each packet before sending it out. \fIotype\fR determines
how the byte offset gets printed. Use \fBh\fR for hexadecimal, \fBd\fR or
anything else for decimal.
.TP
\-L\ \fInum\fR
After all general options have been read and modules initialized, run the
related packet generator \fInum\fR times (0 means indefinitely). Each time
a new packet gets generated, all module specific options applied and the
packet finally sent. So each packet sent will be identical unless
random (\fBr\fIN\fR) or file (\fBf\fIfile\fR) option values are used.
.TP
\-T\ \fItime\fR
Wait \fItime\fR seconds before generating and sending the next packet (the
default value 0 means no waiting, run as fast as possible).
Ignored if no loop parameter was given.
.TP
\-S\ \fIsopt\fR
Uses the setsockopt() call of the OS to change the flags or values. For now the
following \fIsopt\fR are supported:
.RS
.TP
\fBb\fR
Set the \fBSO_BROADCAST\fR flag to 1 (enable/disable permission to transmit
broadcast messages).
.TP
\fBi\fR
Disable setting the \fBIP_HDRINCL\fR flag to 1 (header is included with data).
This is probably not what you want.
.TP
\fB6\fR
Disable setting the IPv6 \fBIPV6_UNICAST_HOPS\fR value (hop limit for unicast)
to the value given via \fBipv6\fR module option \fB\-6h\ \fInum\fR, or if not
given, to \fB32\fR.
.RE

.TP
\-p\ \fImodule\fR
Load the given \fImodule\fR. Can be specified multiple times.
.TP
\-f\ \fIfile\fR
Read the given \fIfile\fR and use its contents as payload.
.TP
\-d\ \fIdata\fR
Use the given \fIdata\fR as payload. The following formats are understood and
tried in the following order (first match wins):
.RS 2
.TP
\fBf\fIfile\fR
file. If \fIfile\fR exists, read the next line of the given \fIfile\fR and use
this line without the trailing newline (\en) but including leading and trailing
whitespaces as \fIdata\fR and restart evaluation.
If \fIfile\fR does not exist, \fBf\fIfile\fR is taken literally.
Because there is no loop detection, one may turn the computer running this
utility into a heating machine easily by just adding the same
value (\fBf\fIfile\fR) to the \fIfile\fR.
Also note, that the same \fIfile\fR can be used as option value multiple
times. Each such usage causes \fBsendip\fR to read the next line of
the \fIfile\fR. If the end of the file has been reached, it starts from the
beginning, i.e. with the first line of the \fIfile\fR. This works, because the
contents of it gets read in and cached as soon as it gets encountered as a
valid data/option value.
.TP
\fBr\fIN\fR
random. Generate and use \fIN\fR random bytes (N is a decimal number).
.TP
\fBz\fIN\fR
zero. Generate and \fIN\fR zero (nul) bytes. (N is a decimal number)
.TP
\fBt\fIN\fR
timestamp. Generate a timestamp (see \fBgettimeofday\fR(3C)) and return the
first \fIN\fR bytes of it (N is a decimal number). If \fIN\fR > than the number
of bytes produced by the timestamp (8 on 32bit, 16 on 64bit) the remaining
bytes will be all zero (nul) bytes.
.TP
\fB0x\fIS\fR or \fB0X\fIS\fR
hex. Ignore the first two charcaters (zero and letter X or x) and interprete
all others (\fIS\fR) as a hex representation of the data to use. Non-digits
are handled in a case-insensitive manner. If a non-hex character occurs, an
error will be raised.
.TP
\fB0\fIS\fR
octal. Ignore the first character (zero) and interprete all others (\fIS\fR)
as a octal representation of the data to use. If a non-octal character occurs,
an error will be raised.
.TP
\fIdata\fR
The \fIdata\fR string is taken literally.

.P
Note that the option values for the modules described below often get evaluated
the same way as \fIdata\fR, however, depending on the type of the option a
string might not be taken literally, but as a decimal number, IP address, CIDR
notation and so on. They can be sometimes even a combination of the formats
mentioned above, e.g. one may use
"\-p\ ipv4\ \-is\ 10.1.1.r1" to generate random 10.1.1.xx source addresses.
.RE

.P
The following terms are used for the value specifications of the module options
below:
.RS 2
\fIdata\fI
Same as desribed above for option "\-f\ \fIdata\fI".
.TP
\fIdnum\fR
A decimal number, which may start with a sequence of white-space
characters (which gets get usually ignored), followed by an optional
'+' or '\-' followed by a sequence of one or more digits from 0 to 9.
If any invalid character is found, the parser usually stops without throwing an
error and converts the string accumulated so far, which might be an empty
string, which in turn gets resolved to 0.  If a number is not in the expected
range, it results either in an error, or the spare bytes in front get silently
dropped.
.TP
\fIrnum\fR
A "real" number accepts hex (prefix \fB0x\fR or \fB0X\fR),
octal (prefix \fB0\fR) and decimal numbers (\fIdnum\fR), only.
Invalid numbers/parts gets usually handled the same way as described
for \fIdnum\fR.
.TP
\fInum\fR
Accepts usually "real" numbers (\fIrnum\fR) as well as the \fBr\fIN\fR and
\fBz\fIN\fR generators. Furthermore the \fBf\fIpath\fR can be used, which is
required to finally resolve to a \fInum\fR.
Invalid numbers/parts gets usually handled the same way as described
for \fIdnum\fR.
.TP
\fIhex\fR
A hexadecimal number consists of the \fBoptional\fR prefix \fB0x\fR or \fB0X\fR
followed by a sequence of the decimal digits and letters a (or A) to f (or F)
with values 10 to 15 respectively.
Invalid parts gets usually handled the same way as described for \fIdnum\fR.
.TP
\fIv4addr\fR
An IPv4 address can be given in dot or CIDR notation, or as a single \fInum\fR.
.RS
.P
In \fBdot notation\fB
\fInum\fB.\fInum\fB.\fInum\fB.\fInum\fR,
\fInum\fB.\fInum\fB.\fInum\fR, and
\fInum\fB.\fInum\fR are allowed (a dot (\fB.\fR) without a trailing
\fInum\fR part is equivalent to \fB.0\fR). The resulting value of each \fInum\fR
must be in the range of decimal 0..255.
.P
When four parts are specified, each part is interpreted as a byte of data and
assigned from left to right to the four bytes of an IPv4 address.
.P
When a three-part address is specified, the last part is interpreted as a
16-bit quantity and placed in the right most two bytes of the network address.
.P
When a two-part address is supplied, the last part is interpreted as a
24-bit quantity and placed in the right most three bytes of the network address.
.P
When only one part, i.e. a \fBsingle \fInum\fR is given, the value is stored
directly in the network address without any byte rearrangement.

.P
\fBCIDR notation\fR is similar to the dot notation:
\fIrnum\fB.\fIrnum\fB.\fIrnum\fB.\fIrnum\fB/\fIrnum\fR.
All numbers are expected to be in the range from 0 to 255, except the netmask
(the part after the slash), which needs to be in the range from 1 to 31.
If the netmask is invalid, it gets silently skipped/ignored.
The difference to the \fBdot notation\fR is, that the host part (i.e. the
trailing (32 - netmask) bits) are drawn from a random generator and are never
all 1s or all 0s, i.e. never produce a broadcast or network address.
So e.g. 10.1.2.0/24 is the same as 10.1.2.r1, but the latter may replace r1
with 0 or 255 (the last IP byte). Also skipping any number infront of the slash
causes it to evaluate to 0x00000000.
.RE
.RE

@MODULES@

.SH OPERANDS
.TP
\fIhostname\fR
The default destination to use.

.SH AUTHOR
.PP
\fBMike Ricketts\fR <mike@earth.li>
.br
\fBMark Carson\fR (NIST)
.br
\fBJens Elkner\fR <jel+sendip@cs.ovgu.de> (man page, code fixes and cleanups)
.br
Debian maintainers and many others (fixes).

.SH NOTES
The source code (GPLv2) for this version can be obtained
via https://github.com/jelmd/sendip/. The initial version of it (v2.5) should
be available on http://www.earth.li/projectpurple/progs/sendip.html, and the
contributions made by Mark Carson (NIST) on
https://www\-x.antd.nist.gov/ipv6/sendip.html as well.

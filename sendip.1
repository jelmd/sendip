.TH "SENDIP" "1" "April 11, 2018" "sendip 2.5.0"

.SH "NAME"
sendip \- a tool to send arbitrary IP packets

.SH "SYNOPSIS"
.\" no hyphenation
.nh
.\" no alignment
.na
.HP
\fBsendip\fR [\-h] [\-V] [\-v] [\-d\ \fIdata\fR\ |\ \-f\ \fIfile\fR] [\-L\ \fInum\fR] [\-T\ time] [\-S sock_opt]... [\-p\ \fImodule\fR]... [\fImodule_options\fR]... \fIhostname\fR
.\" re-enable hyphenation and aligment
.ad
.hy

.SH "DESCRIPTION"
.PP
SendIP is a command-line tool to send arbitrary IP packets. It has a large
number of options to specify the content of every header of a RIP, RIPng, BGP,
TCP, UDP, ICMP, or raw IPv4/IPv6 packet. It also allows any data to be added
to the packet. Checksums can be calculated automatically, but if you wish to
send out wrong checksums, that is supported too.
.PP
Modules are loaded in the order the -p options appear.  The headers from
each module are put immediately inside the headers from the previous module
in the final packet.  For example, to embed bgp inside tcp inside ipv4, do:
.RS
.P
sendip -p ipv4 -p tcp -p bgp ...
.RE
.PP
If no module is given, the \-d\ \fIdata\fR
or \-f\ \fIfile\fR option must be used to set the payload (in this case it
is assumed, that the packet is of type \fBAFINET\fR, i.e. IPv4). Otherwise
either \fBipv4\fR or \fBipv6\fR must be the first module given via CLI options.

Modules may be repeated to create multiple instances of a given header type.
For example, to create an ipip tunneled packet (ipv4 inside ipv4), do
sendip\ -p\ ipv4\ \fIouter-header-args\fR -p\ ipv4\ \fIinner-header-args\fR\ ...

In the case of repeated modules, arguments are applied to the closest matching
module in the command line.

.SH "OPTIONS"
.PP
Beside the module specific options the following general options are recognized
by \fBsendip\fR:
.TP
\-h
Print a help message and exit.
.TP
\-V
Print version and exit.
.TP
\-v
Be verbose.
.TP
\-L\ \fInum\fR
After all general options have been read and modules initialized, run the
related packet generator \fInum\fR times (0 means indefinitely). Each time
a new packet gets generated, all module specific options applied and the
packet finally sent. So each packet sent will be identical unless
random (\fBr\fIN\fR) or file (\fBf\fIfile\fR) option values are used.
.TP
\-T\ \fItime\fR
Wait \fItime\fR seconds before generating and sending the next packet (the
default value 0 means no waiting, run as fast as possible).
Ignored if no loop parameter was given.
.TP
\-S\ \fIsopt\fR
Uses the setsockopt() call of the OS to change the flags or values. For now the
following \fIsopt\fR are supported:
.RS
.TP
\fBb\fR
Set the \fBSO_BROADCAST\fR flag to 1 (enable/disable permission to transmit
broadcast messages).
.TP
\fBi\fR
Disable setting the \fBIP_HDRINCL\fR flag to 1 (header is included with data).
This is probably not what you want.
.TP
\fB6\fR
Disable setting the IPv6 \fBIPV6_UNICAST_HOPS\fR value (hop limit for unicast)
to the value given via \fBipv6\fR module option \fB\-6h\ \fInum\fR, or if not
given, to \fB32\fR.
.RE

.TP
\-p\ \fImodule\fR
Load the given \fImodule\fR. Can be specified multiple times.
.TP
\-f\ \fIfile\fR
Read the given \fIfile\fR and use its contents as payload.

.TP
\-d\ \fIdata\fR
Use the given \fIdata\fR as payload. The following formats are understood and
tried in the following order (first match wins):
.RS 2
.TP
\fBf\fIfile\fR
file. If \fIfile\fR exists, read the next line of the given \fIfile\fR and use
this line without the trailing newline (\en) but including leading and trailing
whitespaces as \fIdata\fR and restart evaluation.
If \fIfile\fR does not exist, \fBf\fIfile\fR is taken literally.
Because there is no loop detection, one may turn the computer running this
utility into a heating machine easily by just adding the same
value (\fBf\fIfile\fR) to the \fIfile\fR.
Also note, that the same \fIfile\fR can be used as option value multiple
times. Each such usage causes \fBsendip\fR to read the next line of
the \fIfile\fR. If the end of the file has been reached, it starts from the
beginning, i.e. with the first line of the \fIfile\fR. This works, because the
contents of it gets read in and cached as soon as it gets encountered as a
valid data/option value.
.TP
\fBr\fIN\fR
random. Generate and use \fIN\fR random bytes (N is a decimal number).
.TP
\fBz\fIN\fR
zero. Generate and \fIN\fR zero (nul) bytes. (N is a decimal number)
.TP
\fBt\fIN\fR
timestamp. Generate a timestamp (see \fBgettimeofday\fR(3C)) and return the
first \fIN\fR bytes of it (N is a decimal number). If \fIN\fR > than the number
of bytes produced by the timestamp (8 on 32bit, 16 on 64bit) the remaining
bytes will be all zero (nul) bytes.
.TP
\fB0x\fIS\fR or \fB0X\fIS\fR
hex. Ignore the first two charcaters (zero and letter X or x) and interprete
all others (\fIS\fR) as a hex representation of the data to use. Non-digits
are handled in a case-insensitive manner.
.TP
\fB0\fIS\fR
octal. Ignore the first character (zero) and interprete all others (\fIS\fR)
as a octal representation of the data to use.
.TP
\fIdata\fR
The \fIdata\fR string is taken literally.

.P
Note that the option values for the modules described below often get evaluated
the same way as \fIdata\fR, however, depending on the type of the option a
string might not be taken literally, but as a decimal number, IP address, CIDR
notation and so on. They can be sometimes even a combination of the formats
mentioned above, e.g. one may use
"\-p\ ipv4\ \-is\ 10.1.1.r1" to generate random 10.1.1.xx source addresses.
.RE

.P
The following terms are used for the value specifications of the module options
below:
.RS 2
.TP
\fIdnum\fR
A decimal number, which may start with a sequence of white-space
characters (which gets get usually ignored), followed by an optional
'+' or '\-' followed by a sequence of one or more digits from 0 to 9.
Using anythig else usually results into an error, or the trailing invalid part
gets ignored, or gets resolved to 0. If a number is not in the expected range,
it results either in an error, or the spare bytes in front get silently dropped.
.TP
\fIrnum\fR
A "real" number accepts hex (prefix \fB0x\fR or \fB0X\fR),
octal (prefix \fB0\fR) and decimal numbers (\fIdnum\fR), only.
Invalid numbers/parts gets usually handled the same way as described
for \fIdnum\fR.
.TP
\fInum\fR
Accepts usually "real" numbers (\fIrnum\fR) as well as the \fBr\fIN\fR and
\fBz\fIN\fR generators. Furthermore the \fBf\fIpath\fR can be used, which is
required to finally resolve to a \fInum\fR.
Invalid numbers/parts gets usually handled the same way as described
for \fIdnum\fR.
.TP
\fIhex\fR
A hexadecimal number consists of the \fBoptional\fR prefix \fB0x\fR or \fB0X\fR
followed by a sequence of the decimal digits and letters a (or A) to f (or F)
with values 10 to 15 respectively.
Invalid parts gets usually handled the same way as described for \fIdnum\fR.
.TP
\fIv4addr\fR
An IPv4 address can be given in dot or CIDR notation, or as a single \fInum\fR.
.RS
.P
In \fBdot notation\fB
\fInum\fB.\fInum\fB.\fInum\fB.\fInum\fR,
\fInum\fB.\fInum\fB.\fInum\fR, and
\fInum\fB.\fInum\fR are allowed (a dot (\fB.\fR) without a trailing
\fInum\fR part is equivalent to \fB.0\fR). The resulting value of each \fInum\fR
must be in the range of decimal 0..255.
.P
When four parts are specified, each part is interpreted as a byte of data and
assigned from left to right to the four bytes of an IPv4 address.
.P
When a three-part address is specified, the last part is interpreted as a
16-bit quantity and placed in the right most two bytes of the network address.
.P
When a two-part address is supplied, the last part is interpreted as a
24-bit quantity and placed in the right most three bytes of the network address.
.P
When only one part, i.e. a \fBsingle \fInum\fR is given, the value is stored
directly in the network address without any byte rearrangement.

.P
\fBCIDR notation\fR is similar to the dot notation:
\fIrnum\fB.\fIrnum\fB.\fIrnum\fB.\fIrnum\fB/\fIrnum\fR.
All numbers are expected to be in the range from 0 to 255, except the netmask
(the part after the slash), which needs to be in the range from 1 to 31.
If the netmask is invalid, it gets silently skipped/ignored.
The difference to the \fBdot notation\fR is, that the host part (i.e. the
trailing (32 - netmask) bits) are drawn from a random generator and are never
all 1s or all 0s, i.e. never produce a broadcast or network address.
So e.g. 10.1.2.0/24 is the same as 10.1.2.r1, but the latter may replace r1
with 0 or 255 (the last IP byte). Also skipping any number infront of the slash
causes it to evaluate to 0x00000000.
.RE
.RE


.SS "ipv6 MODULE OPTIONS"
.TP
\-6v\ \fInum\fR
Set IPv6 \fBversion\fR to \fInum\fR {0..15}.
You almost definitely don't want to change this. Default: 6
.TP
\-6p\ \fInum\fR
Set the IPv6 \fBpriority\fR to \fInum\fR {0..15}. This is actually the first nibble
of the traffic class field. Default: 0
.TP
\-6t\ \fInum\fR
Set the IPv6 \fBtraffic class\fR to \fInum\fR {0..15}. This is actually the second
nibble of the traffic class field. Default: 0
.TP
\-6f\ \fInum\fR
Set the IPv6 \fBflow label\fR to \fInum\fR {0..0xfffff). Default: 0
.TP
\-6l\ \fInum\fR
Set the IPv6 \fBpayload length\fR to \fInum\fR {0..255}. Default: auto
.TP
\-6n\ \fInum\fR|\fIproto\fR
Set the IPv6 \fBnext header\fR field to \fInum\fR {0..255}. If a \fIproto\fRcol
name is given, sendip tries to determine the corresponding number automatically.
Default:\ auto
.TP
\-6h\ \fInum\fR
Set the IPv6 \fBhop limit\fR to \fInum\fR {0..255}. Default: 32
.TP
\-6s\ \fIsrc\fR
Set the \fBsource IPv6\fR address to \fIsrc\fR. Default: ::1
.TP
\-6d\ \fIdst\fR
Set the \fBdestination IPv6\fR address to \fIdst\fR.
Default: \fIhostname\fR operand


.SS "ah MODULE OPTIONS"
.TP
\-as\ \fInum\fR
Set the AH Security Parameters Index (\fBSPI\fR) to \fInum\fR (0..0xffff).
Default:\ 1
.TP
\-aq\ \fInum\fR
Set the AH \fBSequence Number\fR to \fInum\fR (0..0xffff). Default:\ 1
.TP
\-ad\ \fIdata\fR
Append the AH \fBAuthentication Data\fR.  \fIdata\fR has a variable length,
can be either a user-provided string (in hex, octal, decimal, or raw), or rN
for N random or zN for N zero bytes. Default:\ 0
.TP
\-ak\ \fIdata\fR
Pass the given \fIdata\fR as AH \fBkey\fR (string, rN for N random or zN for
N zero bytes) to the authentication module. Gets not transmitted in the packet.
Default:\ none
.TP
\-am\ \fIname\fR
Load and use the authentication \fBmodule\fR with the given \fIname\fR.
Default:\ none
.TP
\-an\ \fInum\fR|\fIproto\fR
Set the AH \fBNext Header\fR field to \fInum\fR {0..0xffff}. If a \fIproto\fRcol
name is given, sendip tries to determine the corresponding number automatically.
Default:\ auto


.SS "esp MODULE OPTIONS"
.TP
\-es\ \fInum\fR
Set the ESP Security Parameters Index (\fBSPI\fR) \fInum\fR (0..0xffff).
Default:\ 0
.TP
\-eq\ \fInum\fR
Set the ESP \fBSequence Number\fR to \fInum\fR (0..0xffff). Default:\ 0
.TP
\-ep\ \fInum\fR
Set the ESP \fBPadding Length\fR to \fInum\fR {0.255} (the minimum needed for
alignment). Default:\ auto
.TP
\-en\ \fInum\fR|\fIproto\fR
Set the ESP \fBNext Header\fR field to \fInum\fR {0..0xffff}. If
a \fIproto\fRcol name is given, sendip tries to determine the corresponding
number automatically.  Default:\ auto
.TP
\-ei\ \fIdata\fR
Set the ESP \fBIV\fR \fIdata\fR (string, rN for N random or zN for N zero
bytes) - max. 8192 bytes.
Default:\ none
.TP
\-eI\ \fIdata\fR
Set the ESP \fBICV\fR \fIdata\fR (string, rN for N random or zN for N zero
bytes) - max. 8192 bytes.
Default:\ none
.TP
\-ek\ \fIdata\fR
Pass the given ESP \fBKey\fR \fIdata\fR (string, rN for N random or zN for
N zero bytes) to the cryptographic module(s). Gets not transmitted in the
packet.
Default:\ none
.TP
\-ea\ \fIname\fR
Load and use the \fBauthentication module\fR with the given \fIname\fR.
Default:\ none
.TP
\-ec\ \fIname\fR
Load and use the \fBcrypto module\fR with the given \fIname\fR.
Default:\ none


.SS "wesp MODULE OPTIONS"
.TP
\-wv\ \fIversion\fR
Set the WESP \fBVersion\fR {0..3}.
Default:\ 0
.TP
\-we\ \fInum\fR
Set the value of WESP \fBEncrypted Payload\fR flag {0|1}.
Default:\ 0
.TP
\-wp\ \fInum\fR
Set the value of WESP \fBPadded\fR flag (also adds 4 bytes padding) {0|1}.
Default:\ 0
.TP
\-wr\ \fInum\fR
Set the value of the WESP \fBReserved\fR field {0..15}.
Default: 0
.TP
\-wh\ \fInum\fR
Set the WESP \fBHeader Length\fR value {0..255}.
Default:\ auto
.TP
\-wt\ \fInum\fR
Set the WESP \fBTrailer Length\fR value {0..255}.
Default:\ auto
.TP
\-wn\ \fInum\fR|\fIproto\fR
Set the WESP \fBNext Header\fR to the given protocol. \fInum\fR is a protocol
number, \fIproto\fR is the name of the protocol and needs to match an entry of
the systems protocols database (see \fB/etc/protocols\fR) or from an internal
hardcoded fallback table.
Default:\ auto


.SS "frag MODULE OPTIONS"
.TP
\-Fn\ \fInum\fR
Set the Fragment \fBnext header\fR to \fInum\fR (0..0xffff). Default:\ auto
.TP
\-Fr\ \fInum\fR
Set the Fragment \fBreserved\fR field to \fInum\fR (0..255}. Default:\ 0
.TP
\-Fo\ \fInum\fR
Set the Fragment \fBoffset\fR to \fInum\fR (0..0x1ffff). Default:\ 0
.TP
\-Ff\ \fInum\fR
Set the Fragment \fBflags\fR to \fInum\fR {0..7} (3 bits, lsb=more fragments).
Default:\ 0
.TP
\-Fi\ \fInum\fR
Set the Fragment \fBidentification\fR to \fInum\fR (0..0xffffffff). Default:\ 0


.SS "gre MODULE OPTIONS"
.TP
\-gc\ \fInum\fR
Set the GRE \fBsupplied checksum\fR to \fInum\fR (0..0xffff). Default:\ none
.TP
\-gC
Add the \fBactual checksum\fR.
.TP
\-gr\ \fInum\fR
Set the GRE \fBrouting\fR field to \fInum\fR (0..0xffffffff). Default:\ 0
.TP
\-gk\ \fInum\fR
Set the GRE \fBkey\fR field to \fInum\fR (0..0xffffffff). Default:\ none
.TP
\-gs\ \fInum\fR
Set the GRE \fBsequence number\fR to \fInum\fR (0..0xffffffff). Default:\ none
.TP
\-gS
Turn the GRE \fBstrict source routing\fR flag on.
.TP
\-ge\ \fInum\fR
Set the GRE \fBrecursion encapsulation limit\fR to \fInum\fR (0..7}. Default:\ 0
.TP
\-gv\ \fInum\fR
Set the GRE \fBversion number\fR to \fInum\fR (0..7}. Default:\ 0
.TP
\-gp\ \fInum\fR
Set the GRE \fBencapsulated protocol\fR to \fInum\fR (0..0xffff).
Default:\ auto (if known, IPv4 and IPv6 only)
.TP
\-go\ \fInum\fR
Set the GRE \fBoffset\fR to \fInum\fR (0..0xffff). Default:\ none


.SS "hop MODULE OPTIONS"
.TP
\-Hn\ \fInum\fR
Set the Option \fBnext header\fR to \fInum\fR (0..0xffff). Default:\ auto
.TP
\-H0
Set the Option \fBpad 0\fR (use 1 byte padding).
.TP
\-Hp\ \fInum\fR
Set the Option \fBpad N bytes\fR to \fInum\fR (2..257). Default:\ 2
.TP
\-Hr\ \fInum\fR
Set the Option \fBrouter alert\fR to \fInum\fR (0..0xffff). Default:\ 0
.TP
\-Hj\ \fInum\fR
Set the Option \fBjumbo frame length\fR to \fInum\fR (0..0xffff).
Note that actual production of jumbo frames requires interface support.
Default:\ 0
.TP
\-Hh\ \fIv6addr\fR
Set the Option (Destination) \fBhome address\fR to the IP \fIv6addr\fRess.
Default:\ ::1
.TP
\-Ht\ \fItype\fB.\fIlength\fB.\fIvalue\fR
Set the Option \fBarbitrary TLV option\fR according to the given parameters.
Each parameter can be specified in the usual way as hex, octal, decimal,
literal, or rN for N random or zN for N zero bytes.
Default:\ 0.0.0


.SS "dst MODULE OPTIONS"
.P
This module takes the same option and arguments as the \fBhop\fR module,
but uses \fBd\fR as the first option letter instead of \fBH\fR.


.SS "route MODULE OPTIONS"
.TP
\-on\ \fInum\fR
Set the Routing \fBnext header\fR to \fInum\fR (0..0xffff). Default:\ auto
.TP
\-ot\ \fInum\fR
Set the Routing \fBheader type\fR to \fInum\fR (0..7). Default:\ 0
.TP
\-os\ \fInum\fR
Set the Routing \fBsegments left\fR  to \fInum\fR (0..7). Default:\ 0
.TP
\-or\ \fInum\fR
Set the Routing \fBreserved\fR field to \fInum\fR (0..0xffffffff). Default:\ 0
.TP
\-oa\ \fIaddr\fR[\fB,\fIaddr\fR]...
Set the Routing \fBlist of addresses\fR. Default:\ none


.SS "sctp MODULE OPTIONS"
See RFC 4960 and RFC 3309.
.TP
\-ss\ \fInum\fR
Set the SCTP \fBsource port\fR {0..65535}. Default:\ 0
.TP
\-sd\ \fInum\fR
Set the SCTP \fBdestination port\fR {0..65535}. Default:\ 0
.TP
\-sv\ \fItag\fR
Set the SCTP \fBvtag\fR. The \fItag\fR may be specified as number, string, or rN for N random bytes. Not more than 4 bytes are copied over, others get silently ignored. Default:\ 0\ if\ init\ chunk,\ 1\ otherwise.
.TP
\-sc\ \fInum\fR
Set the SCTP CRC \fBchecksum\fR to \fInum\fR {0..0xffffffff}. Default:\ auto
.TP
\-sT\ \fInum\fR
Set the SCTP \fBchunk type\fR to the given \fInum\fR {0..255}. Note that multiple chunks may be included. Each chunk type begins a new chunk; subsequent chunk-related fields are applied to that chunk.  Default:\ 0\ (i.e.\ a\ data\ chunk)
.TP
\-sF\ \fInum\fR
Set the SCTP \fBchunk flags\fR to \fInum\fR {0..0xffff}. Default:\ 0
.TP
\-sL\ \fInum\fR
Set the SCTP \fBchunk length\fR to \fInum\fR {0..65535}. Default:\ auto
.TP
\-sD\ \fIdata\fR
Add a SCTP \fBchunk\fR using the given \fIdata\fR (hex, octal, decimal, literal, zN for N zero bytes or rN for N random bytes). Default:\ 0
.TP
\-sI\ [\fItag\fR[\fB:\fIrwnd\fR[\fB:\fInout\fR[\fB:\fInin\fR[\fB:\fItsn\fR]]]]]
Create and add a complete SCTP \fBINIT chunk\fR according to the given parameters. Each parameter may be specified as number, string, or rN for N (should be 2 or 4) random bytes. Missing parameters are set to the corresponding values shown as Default below. Other variable parameters may be appended to this chunk. Beside the colon (\fB:\fR) the following characters can be used as parameter delimiters as well: dot (\fB.\fR), comma (\fB,\fR) and space (\fB \fR).

Default:\ 1.0x1000.1.1.1

The parameters are:
.RS
.TP
\fItag\fR
the initiate tag {0..0xffffffff},
.TP
\fIrwnd\fR
the receiver window credit {0..0xffffffff},
.TP
\fInout\fR
the number of outbound streams {0..65535},
.TP
\fInin\fR
the number of inbound streams {0..65535},
.TP
\fItsn\fR
the initial TSN {0..0xffffffff}.
.RE

.TP
\-s4\ \fIv4addr\fR
Add the SCTP \fBIPv4\fR address TLV using the given IP \fIv4addr\fRess.
.TP
\-s6\ \fIv6addr\fR
Set the SCTP \fBIPv6\fR address TLV using the given IP \fIv6addr\fRess.
.TP
\-sC\ \fInum\fR
Add the SCTP \fBcookie\fR preservative TLV using the given \fInum\fR {0..0xffffffff} to the current chunk.
.TP
\-sH\ \fIhostname\fR
Add a SCTP \fBhost name\fR address TLV using the given \fIhostname\fR (arbitrary string).
.TP
\-sA\ \fItype\fR[\fB:\fItype\fR]...
Add the SCTP supported \fBaddress types\fR TLV using the given \fItype\fRs. For now this utility supports max. 8 types. Beside the colon (\fB:\fR) the following characters can be used as parameter delimiters as well: dot (\fB.\fR), comma (\fB,\fR) and space (\fB \fR).
.TP
\-sE
Add the SCTP \fBECN capable\fR parameter.
.TP
\-sW
Add the SCTP \fBforward TSN supported\fR parameter.
.TP
\-sY\ \fInum\fR
Add the SCTP \fBadaptation layer indication\fR parameter using the given \fInum\fR {0..0xffffffff}.


.SS "ipv4 MODULE OPTIONS"
.TP
\-iv\ \fInum\fR
Set the IP \fBversion\fR to \fInum\fR {0..15}.
You almost definitely don't want to change this. Default: 4
.TP
\-ih\ \fInum\fR
Set the IP \fBheader length\fR to \fInum\fR {0..15}. Default: auto
.TP
\-iy\ \fInum\fR
Set the type of service (\fBTOS\fR) to \fInum\fR {0..255}. Default: 0
.TP
\-il\ \fInum\fR
Set the total IP \fBpacket length\fR to \fInum\fR {0..0xffff}.  Default: auto
.TP
\-ii\ \fInum\fR
Set the IP packet \fBID\fR to \fInum\fR {0..0xffff}.  Default: random
.TP
\-ifm\ \fInum\fR
Set the IP \fBmore fragments\fR flag to \fInum\fR {0|1}. Default: 0
.TP
\-ifd\ \fInum\fR
Set the IP \fBdon't fragment\fR flag to \fInum\fR {0|1}. Default: 0
.TP
\-ifr\ \fInum\fR
Set the IP \fBreserved\fR flag to \fInum\fR {0|1}. Default: 0
.TP
\-if\ \fInum\fR
Set the IP \fBfragment offset\fR to \fInum\fR {0..0x1fff}. Default: 0
.TP
\-it\ \fInum\fR
Set the IP \fBtime to live\fR to \fInum\fR {0..255}. Default: 255
.TP
\-ip\ \fInum\fR
Set the IP \fBprotcol\fR to \fInum\fR {0..255}.
Default: auto, or set by underlying protocol.
.TP
\-ic\ \fInum\fR
Set the IP \fBchecksum\fR to \fInum\fR {0..0xffff}. Default: auto
.TP
\-is\ \fIsrc\fR
Set the \fBsource IP\fR address to \fIsrc\fR. Default: 127.0.0.1
.TP
\-id\ \fIdst\fR
Set the \fBdestination IP\fR address to \fIdst\fR.
Default: \fIhostname\fR operand

.TP
\-ionum\ \fIhex\fR
Set the IP \fBoption\fR to the value given as the \fIhex\fR string (length is
always correct). Do not use a 0x or 0X prefix!  Default: (no options)
.TP
\-ioeol
Set IP option \fBend of list\fR.
.TP
\-ionop
Set IP option \fBno-op\fR.
.TP
\-iosid\ \fIID\fR
Set IP option \fBstream identifier\fR to \fIID\fR {0..0xffff}.
.TP
\-iots\ \fIpointer\fB:\fIoverflow\fB:\fIflag\fR[[\fB:\fIip\fR]\fB:\fIts\fR]...
Set IP option \fBtimestamp\fR. \fIpointer\fR is hex {00..ff}, \fIoverflow\fR
is {0..15}, \fIflag\fR is {0|3}, \fIip\fR a normal IPv4 address and the
timestamp \fIts\fR {0..0xffff}.
.TP
\-iorr\ \fIpointer\fB:\fIaddr\fR[\fB:\fIaddr\fR]...
Set IP option \fBrecord route\fR. \fIpointer\fR is hex {00..ff},
and \fIaddr\fR is a normal IPv4 address.
.TP
\-iolsr\ \fIpointer\fB:\fIaddr\fR[\fB:\fIaddr\fR]...
Set IP option \fBloose source route\fR. \fIpointer\fR is hex {00..ff},
and \fIaddr\fR is a normal IPv4 address.
.TP
\-iossr\ \fIpointer\fB:\fIaddr\fR[\fB:\fIaddr\fR]...
Set IP option \fBstrict source route\fR. \fIpointer\fR is hex {00..ff}, 
and \fIaddr\fR is a normal IPv4 address.

.TP
.B
NOTES
.RS 2
Many operating systems rewrite some or all of the IP header when sending
packets.  Exactly which headers get rewritten depends on the OS.  There is
no portable way to bypass this that the author is aware of. So some IP options
do not work on some operating systems.  Below is a list with known limitations.
This list is not by any means complete and what is here may not be accurate.
If you have more information, please contact the author of this software or
your OS vendor.
\" Common problems
.HP 2
\- IP source address is rewritten if it is zero.
.HP
\- IP packet ID is rewritten (to a randomish value) if it is zero.
.HP
\- IP checksum is always rewritten to the correct value.
.HP
\- Total packet length is always rewritten to the number of bytes sent.
\" Solaris start
.HP
\- IP header length works provided that the length given is not greater
than the number of bytes in the packet.  If it is, sendip will segfault.
.HP
\- IP don't fragment flag always set, other IP flags always cleared.
\" Solaris end
.HP
\- All other headers work as expected.
.RE

.SS "icmp MODULE OPTIONS"
.TP
\-ct\ \fInum\fR
Set ICMP \fBmessage type\fR to \fInum\fR {0..255}.  Default: ICMP_ECHO (8), or
ICMP6_ECHO_REQUEST (128) if embedded in an IPv6 packet.
.TP
\-cd\ \fInum\fR
Set ICMP \fBcode\fR to \fInum\fR {0..255}. Default: 0
.TP
\-cc\ \fInum\fR
Set ICMP \fBchecksum\fR to \fInum\fR {0.0xffff}.  Default: auto


.SS "udp MODULE OPTIONS"
.TP
\-us\ \fInum\fR
Set the UDP \fBsource port\fR to \fInum\fR {0..0xffff}. Default: 0
.TP
\-ud\ \fInum\fR
Set the UDP \fBdestination port\fR to \fInum\fR {0..0xffff}. Default: 0
.TP
\-ul\ \fInum\fR
Set the UDP \fBpacket length\fR to \fInum\fR {0..0xffff}. Default: auto
.TP
\-uc\ \fInum\fR
Set the UDP \fBchecksum\fR to \fInum\fR {0..0xffff}. Default: auto


.SS "rip MODULE OPTIONS"
.TP
\-rv\ \fInum\fR
Set the RIP \fBversion\fR to \fInum\fR {0..15}. Default: 2
.TP
\-rc\ \fInum\fR
Set the RIP \fBcommand\fR {0..15} with 1=request, 2=response,
3=traceon (obsolete), 4=traceoff (obsolete), 5=poll (undocumented),
and 6=poll entry (undocumented).
Default:\ 1
.TP
\-ra\ [\fIauth_type\fB:\fR]\fIpassword\fR
Add a RIP \fBauthentication\fR entry using the given \fIpassword\fR (max.
16 characters) and \fIauth_type\fB.
For default basic authentication \fIauth_type\fR is optional (defaults to 2),
but because a colon (\fB:\fR) is used as value delimiter, it is
mandatory if the password contains a colon!
Also note, that for RIP-2 requests this should be the first entry in the
request.
.TP
\-re\ \fIfamily\fB|\fItag\fB|\fIaddress\fB|\fImask\fB|\fInext\fB|\fImetric\fR
Add a \fBRIP entry\fR using the given information. If a field is missing (empty
string), the corresponding value from the default value will be used instead.
.RS
.TP
\fIfamily\fR
The address family value to set {0..0xffff}. Should be 0xffff for
authentication entry, 2 otherwise. Default:\ 2
.TP
\fItag\fR
The route or authentication tag to set {0..0xffff}. Default:\ 0
.TP
\fIaddress\fR
A normal inet address. Default:\ 0.0.0.0
.TP
\fImask\fR
The subnet mask for the \fIaddress\fR. Default:\ 255.255.255.0
.TP
\fInext\fR
The inet address of the next hop. Default:\ 0.0.0.0
.TP
\fImetric\fR
The distance indicator to set {0..0xffffffff}. Default:\ 16
.RE
.TP
\-rd
Create a RIP \fBdefault request\fR, i.e. get router's entire routing table.
Do not use any other RIP options on this RIP header. Is the same as
\-rc\ 1\ \-re\ 0\fB|\fR0\fB|\fR0.0.0.0\fB|\fR0.0.0.0\fB|\fR16
.TP
\-rr\ \fInum\fR
Set the value of the \fBreserved\fR field to \fInum\fR {0..0xffff}.
Default:\ 0



.SS "ntp MODULE OPTIONS"
The \fItimestamp\fR argument used below is a 64-bit value in the range
of {0..0xffffffff[.0xffffffff]}.
.TP
-nl\ \fInum\fR
Set the NTP \fBLeap Indicator\fR to \fInum\fR {0..3}. Default: 0 (no warning)
.TP
-ns\ \fInum\fR
Set the NTP \fBstatus\fR to \fInum\fR {0..0x3f} OR NTP version (3 bit) and
mode (3 bit). Default: 0 (clock operating OK)
.TP
-nt\ \fInum\fR
Set the NTP \fBtype\fR OR \fBstratum\fR to \fInum\fR {0..255}.
Default: 0 (unspecified)
.TP
-np\ \fInum\fR
Set the NTP \fBprecision\fR field to \fInum\fR {0..255}. Default: 0
.TP
-ne\ \fIdouble\fR
Set the NTP \fBestimated error\fR (root delay) to the given \fIdouble\fR value.
Default: 0.0
.TP
-nd\ \fIdouble\fR
Set the NTP \fBestimated drift\fR rate (root dispersion) to the
given \fIdouble\fR value. Default: 0.0
.TP
-nr\ \fIaddr\fR|\fIID\fR
Set the NTP \fBreference clock\fR to the given IP \fIaddr\fRess
or \fIID\fR (string with max. 4 characters not starting with a digit).
Default: 0
.TP
-nf\ \fItimestamp\fR
Set the NTP \fBreference\fR \fItimestamp\fR. Default: 0.0
.TP
-no\ \fItimestamp\fR
Set the NTP \fBoriginate\fR \fItimestamp\fR. Default: 0.0
.TP
-na\ \fItimestamp\fR
Set the NTP \fBarrival (receive)\fR \fItimestamp\fR. Default: 0.0
.TP
-nx\ \fItimestamp\fR
Set the NTP \fBxmit (transmit)\fR \fItimestamp\fR. Default: 0.0


.SS "tcp MODULE OPTIONS"
.TP
\-ts\ \fInum\fR
Set the TCP \fBsource port\fR to \fInum\fR {0..0xffff}. Default: 0
.TP
\-td\ \fInum\fR
Set the TCP \fBdestination port\fR to \fInum\fR {0..0xffff}. Default: 0
.TP
\-tn\ \fInum\fR
Set the TCP \fBsequence number\fR to \fInum\fR {0..0xffffffff}. Default: random
.TP
\-ta\ \fInum\fR
Set the TCP \fBACK sequence number\fR to \fInum\fR {0..0xffffffff}. Default: 0
.TP
\-tt\ \fInum\fR
Set the TCP \fBdata offset\fR to \fInum\fR {0..15}. Default: auto
.TP
\-tr\ \fInum\fR
Set the TCP header \fBreserved field\fR EXCLUDING ECN and CWR bits
to \fInum\fR {0..15}. Default: 0
.TP
\-tfe\ \fInum\fR
Set the TCP \fBECN bit\fR to \fInum\fR {0|1} (rfc2481). Default: 0
.TP
\-tfc\ \fInum\fR
Set the TCP \fBCWR bit\fR to \fInum\fR {0|1} (rfc2481). Default: 0
.TP
\-tfu\ \fInum\fR
Set the TCP \fBURG bit\fR to \fInum\fR {0|1}. Default: 0, or 1 if -tu specified
.TP
\-tfa\ \fInum\fR
Set the TCP \fBACK bit\fR to \fInum\fR {0|1}. Default: 0, or 1 if -ta specified
.TP
\-tfp\ \fInum\fR
Set the TCP \fBPSH bit\fR to \fInum\fR {0|1}. Default: 0
.TP
\-tfr\ \fInum\fR
Set the TCP \fBRST bit\fR to \fInum\fR {0|1}. Default: 0
.TP
\-tfs\ \fInum\fR
Set the TCP \fBSYN bit\fR to \fInum\fR {0|1}. Default: 1
.TP
\-tff\ \fInum\fR
Set the TCP \fBFIN bit\fR to \fInum\fR {0|1}. Default: 0
.TP
\-tw\ \fInum\fR
Set the TCP \fBwindow size\fR to \fInum\fR {0..0xffff}. Default: 65535
.TP
\-tc\ \fInum\fR
Set the TCP \fBchecksum\fR to \fInum\fR {0..0xffff}. Default: auto
.TP
\-tu\ \fInum\fR
Set the TCP \fBurgent pointer\fR to \fInum\fR {0..0xffff}. Default: 0
.TP
\-tonum\ \fIhex\fR
Set the \fBTCP option\fR as string of \fIhex\fR bytes (length: auto).
Do not prefix with 0x or 0X!
.TP
\-toeol
Set the TCP option \fBend of list\fR.
.TP
\-tonop
Set the TCP option \fBno op\fR.
.TP
\-tomss\ \fInum\fR
Set the TCP option \fBmaximum segment size\fR to \fInum\fR {0..0xffff}.
.TP
\-towscale\ \fInum\fR
Set the TCP option \fBwindow scale\fR to \fInum\fR {0..255} (rfc1323).
.TP
\-tosackok
Set the TCP option \fBallow selective ack\fR (rfc2018).
.TP
\-tosack\ \fInum\fB:\fInum\fR[\fB,\fInum\fB:\fInum\fR]...
Set the TCP option \fBselective ack\fR (rfc2018) to the given value(s).
The left and right edge are in the range of {0..0xffffffff}. If a value
is missing (i.e. empty string), it is considered to be zero.
.TP
\-tots\ \fIval\fB:\fIsecr\fR
Set the TCP option \fBtimestamp\fR (rfc1323) to \fIval\fR and \fIsecr\fR,
both in the range of {0..0xffff}.


.SS "bgp MODULE OPTIONS"
.TP
\-bm\ \fIhex\fR[\fB:\fIhex\fR]...
Set the \fBBGP Marker\fR field to the given value. Each \fIhex\fR value
represents 8 bits so {0..ff}. Not more than 16 \fIhex\fR values will be read!
If less than 16 \fIhex\fR values are given, no adjustments will be made, i.e.
an invalid, too short marker will be used.
Beside the colon (\fB:\fR) one may use any non-hex ASCII character
except '\0' as delimiter, but remember quoting if whitespaces are used and
that leading whitespaces get chomped and thus one may loose bounderies.
Empty or invalid strings are handled as \fB0\fR, so e.g. '::'
becomes '00:00:00'.
Default:\ FF:FF:FF:FF:FF:FF:FF:FF:FF:FF:FF:FF:FF:FF:FF:FF
.TP
\-bl\ \fIdnum\fR
Set the total \fBMessage Length\fR to \fInum\fR {0..65535}. Default: auto
.TP
\-bt\ \fIrnum\fR
Set the \fBMessage Type\fR to \fInum\fR {0..255} (1 OPEN, 2 UPDATE,
3 NOTIFICATION, 4 KEEPALIVE). Default: 4 (KEEPALIVE)
.TP
\-bo\ \fIversion\fB:\fIAS_number\fB:\fIhold_time\fB:\fIID\fB:\fIolength\fR
Append the given \fBOPEN\fR message parameters to the message. Any parameter
can be omitted (empty string) to get the default. The parameters are:
.RS
.TP
\fIversion\fR
BGP version {0..255}. Default: 4
.TP
\fIAS_number\fR
Autonomous System number {0..0xffff}. Default: 1
.TP
\fIhold_time\fR
Hold Timer value in seconds {0..0xffff}. Default: 90
.TP
\fIID\fR
BGP Identifier. It can be a normal IP address or a number in the
range of {0..0xffffffff}. Default:\ 127.0.0.1
.TP
\fIolength\fR
The length of the Optional Parameters field {0..255}.  Default: auto
.RE

.TP
\-boo\ \fItype\fB:\fR[\fIlength\fR]\fB:\fIvalue\fR
Append the given \fBOptional parameter\fR to the OPEN message. The parameters
are:
.RS
.TP
\fItype\fR
The parameter type {0..255}.
.TP
\fIlength\fR
The length of the parameter value in octets. Default:\ auto
.TP
\fIvalue\fR
A sequence of max. 255 bytes given as \fIhex\fR values separated by a
colon ('\fB:\fR').
.RE

.TP
\-bul\ \fInum\fR
Append the total length of \fBWithdrawn routes\fR {0..0xffff} to the UPDATE
message. Default: auto
.TP
\-buw\ \fIprefix\fR[\fB:\fIlength\fR]
Append the given \fBWithdrawn route\fR to the UPDATE message. The parameters
are:
.RS
.TP
\fIprefix\fB
An IP address prefix in CIDR notation, i.e. x.x.x.x/n .
.TP
\fIlength\fR
The length of the prefix in octets {0..255}. Default: auto.
.RE

.TP
\-bus\ \fInum\fR
Set the \fBAttributes length\fR to \fInum\fR {0..0xffffffff} for the UPDATE
message.  Default: auto
.TP
\-bua\ \fIflags\fB:\fItype\fB:\fR[\fIlength\fR]\fB:\fIdata\fR
Append the given \fBAttribute\fR to the UPDATE message. The parameters are:
.RS
.TP
\fIflags\fR
The flags for the attribute entry {0..255}.
.TP
\fItype\fR
The attribute type {0..255}.
.TP
\fIlength\fR
The length of the attribute data in octets, depending on flags {0..255}
or {0..0xffff}. Default: auto
.TP
\fIdata\fR
The attribute data to set represented as sequence of \fIhex\fR bytes separated
by a colon ('\fB:\fR'). Depending on flags max. 255 or 0xffff bytes will be
read.
.RE

.TP
\-bun\ \fIprefix\fR[\fB:\fIlength\fR]
Append the Network Layer Reachability Information (\fBNLRI\fR) to the UPDATE
message. The parameters are the same as for \fB-buw\fR.

.TP
\-bn\ \fIcode\fB:\fIsubcode\fB:\fR[\fIdata\fR]
Append the given \fBNotification\fR to the message. The parameters are:
.RS
.TP
\fIcode\fB
The error code to set {0..255}.
.TP
\fIsubcode\fR
The error subcode to set {0..255}.
.TP
\fIdata\fR
The reason for the notification. Omit for no data.
.RE

.SH OPERANDS
.TP
\fIhostname\fR
The default destination to use.

.SH AUTHOR
.PP
\fBMike Ricketts\fR <mike@earth.li>
.br
\fBMark Carson\fR (NIST)
.br
\fBJens Elkner\fR <jel+sendip@cs.ovgu.de> (man page, code fixes and cleanups)
.br
Debian maintainers and many others (fixes).

.SH NOTES
The source code (GPLv2) for this version can be obtained
via https://github.com/jelmd/sendip/. The initial version of it (v2.5) should
be available on http://www.earth.li/projectpurple/progs/sendip.html, and the
contributions made by Mark Carson (NIST) on
https://www\-x.antd.nist.gov/ipv6/sendip.html as well.
